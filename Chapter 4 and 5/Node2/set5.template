// FILE: set5.template
// CLASS implemented: set (see set5.h for documentation)
// NOTE:
//   Since set is a template class, this file is included in node2.h.
// INVARIANT for the set class:
//   1. The items in the set are stored on a linked list;
//   2. The head pointer of the list is stored in the member variable head_ptr;
//   3. The total number of items in the list is stored in the member variable
//       many_nodes.

#include <cassert>  // Provides assert
#include <cstdlib>  // Provides NULL, rand
#include "node2.h"  // Provides node 
#include <iostream>

namespace main_savitch_6B
{
    template <class Item>
    set<Item>::set( )
    // Library facilities used: cstdlib
    {
	head_ptr = NULL;
	many_nodes = 0;
    }

    template <class Item>
    set<Item>::set(const set<Item>& source)
    // Library facilities used: node2.h
    {
	node<Item> *tail_ptr;  // Needed for argument of list_copy

	list_copy(source.head_ptr, head_ptr, tail_ptr);
	many_nodes = source.many_nodes;
    }

    template <class Item>
    set<Item>::~set( )
    // Library facilities used: node2.h
    {
	list_clear(head_ptr);
	many_nodes = 0;
    }

    template <class Item>
    bool set<Item>::contains(const Item& target) const
    // Library facilities used: cstdlib, node2.h
    {
	bool answer;
	const node<Item> *cursor;
	
	answer = false;
	cursor = list_search(head_ptr, target);
	if(cursor != NULL)
		answer = true;
	return answer;
    }
    
    template <class Item>
    bool set<Item>::erase_one(const Item& target)
    // Library facilities used: cstdlib, node2.h
    {
	node<Item> *target_ptr;
	target_ptr = list_search(head_ptr, target);
	if (target_ptr == NULL)
	    return false; // target isn't in the set, so no work to do
	target_ptr->set_data( head_ptr->data( ) );
	list_head_remove(head_ptr);
	--many_nodes;
	return true;
    }

    template <class Item>
    Item set<Item>::grab( ) const
    // Library facilities used: cassert, cstdlib, node2.h
    {
	size_type i;
	const node<Item> *cursor;
	assert(size( ) > 0);
	i = (std::rand( ) % size( )) + 1;
	cursor = list_locate(head_ptr, i);
	return cursor->data( );
    }

    template <class Item>
    void set<Item>::set_insert(const Item& entry)
    // Library facilities used: node2.h
    {
	node<Item> *target_ptr;
	target_ptr = list_search(head_ptr, entry);
	if(target_ptr == NULL)
		list_head_insert(head_ptr, entry);
	++many_nodes;
    }

    template <class Item>
    void set<Item>::operator +=(const set<Item>& addend)
    // Library facilities used: node2.h
    {
	set<Item>::const_iterator p;
	
	if (addend.many_nodes > 0)
	{
	   
	   for(p= addend.begin( ); p != NULL; ++p)
	   {
		   set_insert(*p);
		}
	    many_nodes += addend.many_nodes;
	}
    }
    
    template <class Item>
    void set<Item>::operator =(const set<Item>& source)
    // Library facilities used: node2.h
    {
	node<Item> *tail_ptr; // Needed for argument to list_copy

	if (this == &source)
            return;

	list_clear(head_ptr);
	many_nodes = 0;

	list_copy(source.head_ptr, head_ptr, tail_ptr);
	many_nodes = source.many_nodes;
    }

    template <class Item>
    set<Item> operator +(const set<Item>& b1, const set<Item>& b2)
    {
	set<Item> answer;

	answer += b1; 
	answer += b2;
	return answer;
    }
	template <class Item>
    void set<Item>:: print()
	{
	typename set<int>::const_iterator p;
		
		
		for(p = head_ptr; p != NULL; ++p)
		{
			std::cout << *p << ", ";
		}
		std::cout << std::endl;
	}
}